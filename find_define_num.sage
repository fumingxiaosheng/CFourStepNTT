# 基于本身的数找2n次本原单位根

x = 288482366111684746
p = 576460752303415297
F = GF(p)
a = F(x)

# 检查a是否有平方根
if a.is_square():
    y = a.sqrt()
    print(y)
else:
    print("x is not a quadratic residue modulo p.")

exp = 2^13
print((y^exp ) % p)


primes=[576460752303415297, 576460752303439873, 576460752304439297,
            576460752308273153, 576460752308273153, 576460752315482113,
            576460752315482113, 576460752340123649, 576460752364240897,
            576460752475389953, 576460752597024769, 576460753024843777,
            576460753175838721, 288230377292562433, 288230383802122241,
            288230385815388161, 288230385815388161]

omega=[288482366111684746, 37048445140799662,  459782973201979845,
            64800917766465203,  425015386842055933, 18734847765732801,
            119109113519742895, 227584740857897520, 477282059544659462,
            570131728462077067, 433594414095420776, 219263994987749328,
            189790554094222112, 96649110792683523, 250648942594717784,
            279172744045218282, 225865349704673648]

psi=[238394956950829, 54612008597396, 8242615629351, 16141297350887,
            3760097055997,   11571974431275, 328867687796,  2298846063117,
            731868219707,    409596963254,   189266227206,  31864818375,
            92067739764, 5214432335, 734084005, 3351406780, 717004697]

for i in range(0,17):
    exp = 2^(i + 12)
    print(power_mod(omega[i],exp,primes[i]),power_mod(psi[i],exp,primes[i]))
print("check all done")

# 在 源码中，都使用的是omega作为本原单位根，因此，在这个给出其二次本原单位根

omega_2n = []
for i in range(0,17):
    exp = 2^(i + 13)
    F = GF(primes[i])
    a = F(omega[i])
    if a.is_square():
        y = a.sqrt()
        print(y)
        omega_2n.append(y)
    else:
        print("x is not a quadratic residue modulo p.")
    print(power_mod(omega_2n[i],exp,primes[i]))

print(omega_2n)
